#include <string.h>
#include "board.h"


/*
 *  GENERATE_BOARD_MAPPINGS
 *  =======================
 *
 *  The function generates the mappings between the
 *  extended 120-square board and the conventional
 *  64-square board. This is convenient for the bitboard
 *  representation of pieces in the board-structure.
 *
 *  Parameter:
 *    - board: Pointer to the board-structure
 *
 *  Return:
 *    - true:  Mapping successfully built,
 *    - false: else.
 */

bool generate_board_mappings (board_t *board)
{
    square_t *s_64_120;
    square_t *s_120_64;
    uint16    row;
    uint16    col;
    uint16    sq = 0;

    if (board == NULL)
        {
        DLOG (__FILE__, __func__, __LINE__, "Unexpected NULL pointer.");
        return false;
        }

    s_64_120 = board->sq_64_to_120;
    s_120_64 = board->sq_120_to_64;

    memset (s_120_64, OFF_BOARD, BOARD_SIZE_EXT * sizeof (square_t));

    for (row = ROW_1; row < ROW_8; row ++)
        {
        for (col = COL_A; col < COL_H; col ++)
            {
            s_64_120[sq] = SQ_64_TO_120 (row, col);
            s_120_64[s_64_120[sq]] = sq;
            sq ++;
            }
        }

    return true;
}


/*
 *  INIT_BOARD
 *  ==========
 *
 *  The function initializes all board structures.
 *
 *  Parameter:
 *    - board: Pointer to the board-structure
 *
 *  Return:
 *    - true:  All structures are successfully initialized,
 *    - false: else.
 */

bool init_board (board_t *board)
{
    if (board == NULL)
        {
        #ifdef DEBUG
            dlog (__FILE__, __func__, __LINE__, "Unexpected NULL pointer.");
        #endif
        return false;
        }

    if (!generate_board_mappings (board))
        return false;

    board->side       = WHITE;
    board->castle     = CASTLE_ALL;
    board->en_passant = OFF_BOARD;
    board->draw_50    = 0;
    board->hm_history = 0;

    memset (board->history, 0, MAX_HALFMOVES * sizeof (hash_t));

    return true;
}
