#ifndef BOARD_HPP
#define BOARD_HPP

#include <bitset>

namespace mmo
{
    class Board
    {
        public:
            using square_t = short;

            Board ();
            enum color_t {WHITE = 0, BLACK, BOTH};
            enum {ROW_1,ROW_2,ROW_3,ROW_4,ROW_5,ROW_6,ROW_7,ROW_8};
            enum {COL_1,COL_2,COL_3,COL_4,COL_5,COL_6,COL_7,COL_8};
            enum {A1 = 21, B1, C1, D1, E1, F1, G1, H1,
                  A2 = 31, B2, C2, D2, E2, F2, G2, H2,
                  A3 = 41, B3, C3, D3, E3, F3, G3, H3,
                  A4 = 51, B4, C4, D4, E4, F4, G4, H4,
                  A5 = 61, B5, C5, D5, E5, F5, G5, H5,
                  A6 = 71, B6, C6, D6, E6, F6, G6, H6,
                  A7 = 81, B7, C7, D7, E7, F7, G7, H7,
                  A8 = 91, B8, C8, D8, E8, F8, G8, H8, OFF_BOARD};
        private:
            square_t squares_64[64];     //Proper chessboard boundaries
            square_t squares_120[120];   //Extended chessboard with 'off-board' boundaries
            color_t side;                //Color to move
            short draw_50;               //50 moves draw counter
            square_t en_passant;         //optional en-passant square
            std::bitset<4> castle_perms; //Castling permissions
    };
}

#endif
